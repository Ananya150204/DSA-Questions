Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Code : O(N) extra space
pair<ListNode*, ListNode*> reverse(ListNode* head){
        ListNode* tail = head;
        if (head == nullptr || head->next == nullptr){
            return {head,head};
        }
        ListNode* curr = head;
        ListNode* prev = nullptr;
        ListNode* nex = head->next;

        while (nex != nullptr){
            curr->next = prev;
            prev = curr;
            curr = nex;
            nex = nex->next;
        }
        curr->next = prev;
        return {curr,tail};
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        vector<pair<ListNode*,ListNode*>> v;
        ListNode* h = head;
        ListNode* temp = head;
        ListNode* prev = temp;
        int len = 0;
        int count = 0;
        while (temp != nullptr){
            len ++;
            count ++;
            if (count < k){
                prev = temp;
                temp = temp->next;
            }
            else {
                ListNode* adhoc = temp->next;
                temp->next = nullptr;
                v.push_back(reverse(h));
                h = adhoc;
                count = 0;
                prev = h;
                temp = adhoc;
            }
        }

        int n = v.size();
        for (int i = 0; i < n-1; i++){
            v[i].second->next = v[i+1].first; // 2,1 - 4,3;
        }
        if (len%k != 0){
            v[n-1].second->next = h;
        }
        return v[0].first;
    }

Code : O(1) space
ListNode* reverse(ListNode* head){
        ListNode* tail = head;
        if (head == nullptr || head->next == nullptr){
            return head;
        }
        ListNode* curr = head;
        ListNode* prev = nullptr;
        ListNode* nex = head->next;

        while (nex != nullptr){
            curr->next = prev;
            prev = curr;
            curr = nex;
            nex = nex->next;
        }
        curr->next = prev;
        return curr;
    }

    ListNode* getkthNode(ListNode* temp, int k){
        k = k - 1;
        while (temp != nullptr && k > 0){
            temp = temp->next;
            k--;
        }
        return temp;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
        ListNode* prev = nullptr;
        while (temp != nullptr){
            ListNode* kthNode = getkthNode(temp,k);
            if (kthNode == nullptr){
                if (prev){
                    prev->next = temp;
                }
                break;
            }
            ListNode* nextHead = kthNode->next;
            kthNode->next = nullptr;
            reverse(temp);
            if (temp == head){
                head = kthNode;
            }
            else {
                // 1 to 4 in 1,2,3,4,5
                prev->next = kthNode; // I was doing update to nextHead :(
            }
            prev = temp;
            temp = nextHead;
        }
        return head;
    }
