Given a linked list of size N. The task is to complete the function countNodesinLoop() that checks whether a given Linked List contains a loop or not and if the loop is present then return the count of nodes in a loop or else return 0. C is the position of the node to which the last node is connected. If it is 0 then no loop.
Code 1:
int countNodesinLoop(struct Node *head)
{
    // Code here
    bool isloop = false;
    struct Node* temp = head;
    unordered_map<struct Node*, int> my;
    my[head] = 1;
    while (temp != nullptr){
        temp = temp->next;
        if (my.find(temp) != my.end()){
            isloop = true;
            break;
        }
        my[temp] = 1;
    }
    if (isloop == false){
        return 0;
    }

    int l1 = 0;
     struct Node* slow = head;
     struct Node* fast = head;
       while (fast != nullptr && fast->next != nullptr){
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast){
            slow = head;
            while (slow != fast){
                l1 ++;
                slow = slow->next;
                fast = fast->next;
            }
            return my.size()-l1;
        }
       } 
       
    return my.size()-l1;
 }

Code 2 :
int countNodesinLoop(struct Node *head)
{
    // Code here
    int timer = 1;
    struct Node* temp = head;
    unordered_map<struct Node*, int> my;
    my[head] = 1;
    while (temp != nullptr){
        timer ++;
        temp = temp->next;
        if (my.find(temp) != my.end()){
            int value = my[temp];
            return timer - value;
        }
        my[temp] = timer;
        
    }
    return 0;
}

Code 3 :
int countNodesinLoop(struct Node *head)
{
    // Code here
    int count = 0;
    struct Node* slow = head;
    struct Node* fast = head;
    while (fast != nullptr && fast->next != nullptr){
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast){
            fast = fast->next;
            while (fast != slow){
                fast = fast->next;
                count ++;
            }
            return count+1;
        }
    }
    return count;
}
