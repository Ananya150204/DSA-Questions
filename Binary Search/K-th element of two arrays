You're given two sorted arrays 'arr1' and 'arr2' of size 'n' and 'm' respectively and an element 'k'.
Find the element that would be at the 'kth' position of the combined sorted array.
Position 'k' is given according to 1 - based indexing, but arrays 'arr1' and 'arr2' are using 0 - based indexing.

For example :
Input: 'arr1' = [2, 3, 45], 'arr2' = [4, 6, 7, 8] and 'k' = 4
Output: 6
Explanation: The merged array will be [2, 3, 4, 6, 7, 8, 45]. The element at position '4' of this array is 6. Hence we return 6.

Idea : Median is also k-th element. Say arr2 is of size 5. Say k is 7. Now u can't pick 0 elements
from arr1. So start may not be 0 always. Similarly think why there is a constraint on end.
Code :
int kthElement(vector<int> &nums1, vector<int>& nums2, int m, int n, int k){
    
        if (m > n){
            return kthElement(nums2, nums1, n, m, k);
        }
        int start = max(0,k-n);
        int end = min(k,m);
        while (start <= end){
            int mid1 = start + (end-start)/2;
            int mid2 = k - mid1;
            int l1 = INT_MIN;
            int l2 = INT_MIN;
            int r1 = INT_MAX;
            int r2 = INT_MAX;
            if (mid1 - 1 < m && mid1 >= 01){
                l1 = nums1[mid1 - 1];
                
            }
            if (mid1 < m && mid1 >= 0){
                r1 = nums1[mid1];
                
            }
            if (mid2 - 1 < n && mid2 >= 01){
                l2 = nums2[mid2-1];
                
            }
            if (mid2  < n && mid2 >= 0){
                r2 = nums2[mid2];
               
            }
            if (l1 <= r2 && l2 <= r1){
                return max(l1,l2);  
            }
            else if (l1 > r2){
                end = mid1 - 1;
            }
            else {
                start = mid1 + 1;
            }
            //cout << endl;
        }
        return 0;
}
