A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.
Idea : Visualise graphically. Becomes easier.
Code :
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if (n == 1){
            return 0;
        }
        if (nums[0] > nums[1]){
            return 0;
        }
        if (nums[n-1] > nums[n-2]){
            return n-1;
        }
        int start = 1;
        int end = n-2;
        int mid;
        while (start <= end){
            mid = start + (end-start)/2;
            if (nums[mid] > nums[mid+1] && nums[mid] > nums[mid-1]){
                return mid;
            }
            if (nums[mid] > nums[mid-1]){
                start = mid + 1;
            }
            else if (nums[mid] > nums[mid+1]){
                end = mid - 1;
            }
            else {
                end = mid - 1;
            }
        }
        return -1;
    }
};
