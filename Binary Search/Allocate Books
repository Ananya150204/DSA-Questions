Given an array ‘arr’ of integer numbers, ‘arr[i]’ represents the number of pages in the ‘i-th’ book.
There are ‘m’ number of students, and the task is to allocate all the books to the students.
Allocate books in such a way that:
1. Each student gets at least one book.
2. Each book should be allocated to only one student.
3. Book allocation should be in a contiguous manner.
You have to allocate the book to ‘m’ students such that the maximum number of pages assigned to a student is minimum.
If the allocation of books is not possible, return -1.
Code :
int isPossible(vector<int>& arr, int n, int mid) {
    int numStu = 1; // Initialize number of students required
    long long int sum = arr[0]; // Initialize the sum of pages for the first student
    
    for (int i = 1; i < n; i++) {
        // If adding this book exceeds the mid value, allocate to new student
        if (sum + arr[i] > mid) {
            numStu = numStu + 1; // Increment the number of students
            sum = arr[i]; // Start new sum for next student
        } else {
            sum += arr[i]; // Otherwise, add to current student's pages
        }
    }
    return numStu;
}

int findPages(vector<int>& arr, int n, int m) {
    // If there are more students than books, it's not possible to allocate
    if (m > n) {
        return -1;
    }

    int start = INT_MIN;
    long long int end = 0;
    
    // Determine the range for binary search
    for (int i = 0; i < n; i++) {
        start = max(start, arr[i]); // The maximum number of pages in a single book
        end = end + arr[i]; // Total sum of pages
    }

    int ans = -1;

    // Binary search for the minimum maximum number of pages
    while (start <= end) {
        int mid = start + (end - start) / 2;
        
        if (isPossible(arr, n, mid) <= m) {
            ans = mid;
            end = mid - 1; // Try for a smaller maximum
        } else {
            start = mid + 1; // Try for a larger maximum
        }
    }
    
    return ans;
}
