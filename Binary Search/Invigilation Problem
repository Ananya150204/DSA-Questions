IIT Bombay is conducting an end semester exam. There are 100,000 rows, each numbered from 1 to 100,000. Each student is assigned a row number between 1 and 100,000, both included. Multiple students may be assigned the same row. Note that some rows may be empty.

The institute has also appointed invigilators to the exam hall. Each invigilator is given a number from 1 to 100000 and must stand in the corresponding row. To ensure that the students do not employ unfair means, each invigilator (standing at say row x) monitors students seated in rows from max(1, x-k) to min(100,000, x+k), both included. Your task is to find the minimum value of k such that no student can cheat in the exam, ie., every student is monitored by atleast one invigilator.

EXAMPLE:
Input: 4 2 1 2 3 4 1 4

Output: 1

Input Format

The first line contains two space separated integers n and m, the number of students and the number of invigilators respectively.

The second line contains n space separated integers, the ith of which represents the row number of the ith student.

The third line contains m space separated integers, the jth of which represents the row number of the jth invigilator.

Code :

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;

int binarySearchClosest(const vector<int>& invigilators, int studentPos) {
    int left = 0, right = invigilators.size() - 1;
    int closestDist = INT_MAX;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        closestDist = min(closestDist, abs(invigilators[mid] - studentPos));

        if (invigilators[mid] < studentPos) {
            left = mid + 1;
        } else if (invigilators[mid] > studentPos) {
            right = mid - 1;
        } else {
            // Most important line // Easy to forget
            break; // Found an invigilator exactly at the student's position
        }
    }

    return closestDist;
}

int findMinK(const vector<int>& students, const vector<int>& invigilators) {
    int k = 0;

    for (int studentPos : students) {
        int distToClosestInvigilator = binarySearchClosest(invigilators, studentPos);
        k = max(k, distToClosestInvigilator);
    }

    return k;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<int> students(n), invigilators(m);

    for (int i = 0; i < n; i++) {
        cin >> students[i];
    }

    for (int i = 0; i < m; i++) {
        cin >> invigilators[i];
}


sort(invigilators.begin(), invigilators.end());

int k = findMinK(students, invigilators);

cout << k << endl;
return 0;}
