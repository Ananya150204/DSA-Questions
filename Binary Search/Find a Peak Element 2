A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.
Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].
You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.
You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.
Code :
class Solution {
public:
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        
        int start = 0;
        int end = n-1;
        // Take max of every row and compare it to top and bottom.
        while (start <= end){
            int mid = start + (end-start)/2;
            int maxi = INT_MIN;
            int x = mid;
            int y = -1;
            for (int i = 0; i < m; i++){
                if (maxi < mat[mid][i]){
                    maxi = mat[mid][i];
                    y = i;
                }
            }
            
            int top = -1;
            if (x-1 >= 0){
                top = mat[x-1][y];
            }
            int bottom = -1;
            if (x+1 < n){
                bottom = mat[x+1][y];
            }
            if (mat[x][y] > top && mat[x][y] > bottom){
                return {x,y};
            }
            else if (mat[x][y] < top){
                end = mid - 1; // we need only 1 peak ele. It might not be max.
            }
            else {
                start = mid + 1;
            }
        }
        return {-1,-1};
    }
};

