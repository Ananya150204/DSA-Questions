Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 
Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-10^6 <= nums1[i], nums2[i] <= 10^6

Code :
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int total = m + n;
        if (m > n){
            return findMedianSortedArrays(nums2,nums1);
        }
        int start = 0;
        int end = m;
        while (start <= end){
            int mid1 = start + (end-start)/2;
            int mid2 = (total+1)/2 - mid1;
            int l1 = INT_MIN;
            int l2 = INT_MIN;
            int r1 = INT_MAX;
            int r2 = INT_MAX;
            if (mid1 - 1 < m && mid1 >= 01){
                l1 = nums1[mid1 - 1];
                //cout << "Val of l1" << l1 << " ";
            }
            if (mid1 < m && mid1 >= 0){
                r1 = nums1[mid1];
                //cout << "Val of r1" << r1 << " ";
            }
            if (mid2 - 1 < n && mid2 >= 01){
                l2 = nums2[mid2-1];
                //cout << "Val of l2" << l2 << " ";
            }
            if (mid2  < n && mid2 >= 0){
                r2 = nums2[mid2];
                //cout << "Val of r2" << r2 << " ";
            }
            if (l1 <= r2 && l2 <= r1){
                if (total % 2 == 1){
                    return max(l1,l2);
                }
                else {
                    return (double)(max(l1,l2) + min(r1,r2))/2.0;
                }
            }
            else if (l1 > r2){
                end = mid1 - 1;
            }
            else {
                start = mid1 + 1;
            }
            //cout << endl;
        }
        return 0;
    }
};
