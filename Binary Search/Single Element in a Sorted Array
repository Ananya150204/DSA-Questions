You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.
Comment : Beautiful solution honestly. Requires u to think
Code :
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if (n == 1){
            return nums[0];
        }
        if (nums[0] != nums[1]){
            return nums[0];
        }
        if (nums[n-1] != nums[n-2]){
            return nums[n-1];
        }
        int start = 1;
        int end = n-2;
        int mid;
        int ans;
        while (start <= end){
            mid = start + (end-start)/2;
            if (nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1]){
                return nums[mid];
            }
            if (mid%2 == 0){
               if (nums[mid-1] == nums[mid]){
                // U r on the right of the element (odd,even)
                end = mid - 1;
               }
               else {
                start = mid + 1;
               }
            }
            else { // Mid is odd
                if (nums[mid-1] == nums[mid]){
                    // U r on the left of the ele (even,odd)
                    start = mid + 1;
                }
                else {
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
};
