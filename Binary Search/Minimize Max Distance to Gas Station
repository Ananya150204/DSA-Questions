We have a horizontal number line. On that number line, we have gas stations at positions stations[0], stations[1], ..., stations[N-1], where n = size of the stations array. 
Now, we add k more gas stations so that d, the maximum distance between adjacent gas stations, is minimized. 
We have to find the smallest possible value of d. 
Find the answer exactly to 2 decimal places.
Example 1:

Input:
n = 10
stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 9
Output: 0.50
Explanation: Each of the 9 stations can be added mid way between all the existing adjacent stations.
Example 2:

Input:
n = 10
stations = [3,6,12,19,33,44,67,72,89,95] 
k = 2 
Output: 14.00 
Explanation: Construction of gas stations at 8th(between 72 and 89) and 6th(between 44 and 67) locations.


Expected Time Complexity: O(n*log k)
Expected Auxiliary Space: O(1)

Constraint:
10 <= n <= 5000 
0 <= stations[i] <= 109 
0 <= k <= 105

stations is sorted in a strictly increasing order.

Brute Code :
double findSmallestMaxDist(vector<int> &stations, int k) {
        // Code here
        int n = stations.size();
        vector<int> howMany(n-1,0);
        for (int i = 0; i < k; i++){
            double maxi = -1;
            int maxIndex = -1;
            for (int j = 0; j < n-1; j++){
                double sep = (double)(stations[j+1]-stations[j])/(howMany[j]+1);
                if (maxi < sep){
                    maxi = sep;
                    maxIndex = j; 
                }
            }
            if (maxIndex != -1){
                howMany[maxIndex] = howMany[maxIndex] + 1;
            }
        }
        double ans = 0;
        for (int j = 0; j < n-1; j++){
            ans = max(ans, (double)(stations[j+1] - stations[j]) / (howMany[j] + 1));
        }
        return ans;   
    }
Priority Queue Code :
double minimiseMaxDistance(vector<int> &arr, int k) {
    int n = arr.size();
    vector<int> howMany(n - 1, 0);
    priority_queue<pair<double, int>> pq;

    // Initialize the priority queue with initial distances and their indices
    for (int i = 0; i < n - 1; i++) {
        double initialDist = static_cast<double>(arr[i + 1] - arr[i]);
        pq.push({initialDist, i});
    }

    // Add k new stations
    for (int i = 0; i < k; i++) {
        auto it = pq.top();
        pq.pop();
        int index = it.second;
        howMany[index]++; // Increment the number of additional stations in this segment
        double initDiff = static_cast<double>(arr[index + 1] - arr[index]);
        double finalDiff = initDiff / (howMany[index] + 1); // Calculate the new distance
        pq.push({finalDiff, index});
    }

    double result = pq.top().first;
	return result;
}
Binary Search Code :
int numberOfGasStationsRequired(long double dist, vector<int> &arr) {
    int n = arr.size(); // size of the array
    int cnt = 0;
    for (int i = 1; i < n; i++) {
        int numberInBetween = ((arr[i] - arr[i - 1]) / dist);
        if ((arr[i] - arr[i - 1]) == (dist * numberInBetween)) {
            numberInBetween--;
        }
        cnt += numberInBetween;
    }
    return cnt;
}

long double minimiseMaxDistance(vector<int> &arr, int k) {
    int n = arr.size(); // size of the array
    long double low = 0;
    long double high = 0;

    //Find the maximum distance:
    for (int i = 0; i < n - 1; i++) {
        high = max(high, (long double)(arr[i + 1] - arr[i]));
    }

    //Apply Binary search:
    long double diff = 1e-6 ;
    while (high - low > diff) {
        long double mid = (low + high) / (2.0);
        int cnt = numberOfGasStationsRequired(mid, arr);
        if (cnt > k) {
            low = mid;
        }
        else {
            high = mid;
        }
    }
    return high;
}
