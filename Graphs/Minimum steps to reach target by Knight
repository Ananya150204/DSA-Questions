You have been given a square chessboard of size ‘N x N’. The position coordinates of the Knight and the position coordinates of the target are also given.
Your task is to find out the minimum steps a Knight will take to reach the target position.
Sample input 1
2
8
2 1
8 5
6
4 5
1 1
Sample output 1
4
3
Key Idea : Shortest path == BFS. Apply cleverly.
Code :
struct Cell {
    int x;
    int y;
    int dist;
    Cell(int x, int y, int dist){
        this->x = x;
        this->y = y;
        this->dist = dist;
    }
};
// Utility function to check if the position is inside the board and not visited

// BFS to find the shortest path from knight's position to the target position
int minSteps(pair<int, int> knightPosition, pair<int, int> targetPosition, int n) {
    int srcx = knightPosition.first-1;
    int srcy = knightPosition.second-1;
    int dstx = targetPosition.first-1;
    int dsty = targetPosition.second-1;

    vector<vector<bool>> isVis(n,vector<bool>(n,0));
    queue<Cell> q;
    Cell cell(srcx,srcy,0);
    q.push(cell);
    isVis[srcx][srcy] = true;
    while (q.empty() == false){
        Cell frontNode = q.front();
        q.pop();
        if (frontNode.x == dstx && frontNode.y == dsty){
            return frontNode.dist;
        }
        vector<int> xdir = {2,2,-2,-2,1,1,-1,-1};
        vector<int> ydir = {1,-1,1,-1,2,-2,2,-2};

        for (int i = 0; i < 8; i++){
            int newX = frontNode.x + xdir[i];
            int newY = frontNode.y + ydir[i];

            if (newX >=0 && newX < n && newY >= 0 &&
            newY < n && isVis[newX][newY] == false){
                Cell n(newX,newY,frontNode.dist+1);
                isVis[newX][newY] = true;
                q.push(n);
            }
        }
    }
    return -1;
}
