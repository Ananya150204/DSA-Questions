Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.
The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.
Example 1:

Input: s = "42"
Output: 42

Example 2:

Input: s = " -042"
Output: -42

Example 3:

Input: s = "1337c0d3"

Output: 1337

Explanation:

Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
         ^
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
             ^
Example 4:

Input: s = "0-1"

Output: 0

Explanation:

Step 1: "0-1" (no characters read because there is no leading whitespace)
         ^
Step 2: "0-1" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "0-1" ("0" is read in; reading stops because the next character is a non-digit)
          ^
Example 5:

Input: s = "words and 987"

Output: 0

Explanation:

Reading stops at the first non-digit character 'w'.

 

Constraints:

0 <= s.length <= 200
s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.

Code : ( My non elegant code )
class Solution {
public:
    int myAtoi(string s) {
        string ans = "";
        bool firstCh = false; // Track first non whitespace
        for (char ch : s){
            if (ch == ' ' && firstCh == false){

            }
            else if (ch != ' ' && firstCh == false){
                firstCh = true;
                if (ch != '0' && ch != '1' && ch != '2' && ch != '3'
                && ch != '4' && ch != '5' && ch != '6' && ch != '7'
                && ch != '8' && ch != '9' && ch != '+' && ch != '-'){
                    break;
                }
                else {
                    ans = ans + ch;
                    //cout << ans;
                }
            }
            else if (firstCh == true && (ch == '+' || ch == '-')){
                break;
            }
            else if (ch != '0' && ch != '1' && ch != '2' && ch != '3'
                && ch != '4' && ch != '5' && ch != '6' && ch != '7'
                && ch != '8' && ch != '9' && ch != '+' && ch != '-'){
                    break;
                }
            else if (ch == '0' || ch == '1' || ch == '2' || ch == '3'
                || ch == '4' || ch == '5' || ch == '6' || ch == '7'
                || ch == '8' || ch == '9' || ch == '+' || ch == '-'){
                    ans = ans + ch;
                }
            
        }
        
        if (ans == ""){
            return 0;
        }
        if (ans == "+" || ans == "-"){
            return 0;
        }
        int res = 0;
        int n = ans.size();
        bool isNegative = false;
        if (ans[0] == '-'){
            isNegative = true;
        }
        if (isNegative){
            int powerOf10 = n-2;
            for (int i = 1; i < n; i++){
                if (res + (ans[i]-48)* pow(10,powerOf10) > pow(2,31) - 1){
                    return -pow(2,31);
                }
                res = res + (ans[i]-48)* pow(10,powerOf10);
                powerOf10 --;
            }
            if (-res < -pow(2,31)){
                return -pow(2,31);
            }
            return -res;
        }
        else {
            if (ans[0] == '+'){
                int powerOf10 = n-2;
                for (int i = 1; i < n; i++){
                    if (res + (ans[i]-48)* pow(10,powerOf10) > pow(2,31)-1){
                        return pow(2,31)-1;
                    }
                    res = res + (ans[i]-48)* pow(10,powerOf10);
                    powerOf10 --;
                }
                if (res > pow(2,31)-1){
                return pow(2,31)-1;
            }
                return res;
            }
            int powerOf10 = n-1;
            for (int i = 0; i < n; i++){
                if (res + (ans[i]-48)* pow(10,powerOf10) > pow(2,31)-1){
                        return pow(2,31)-1;
                }
                res = res + (ans[i]-48)* pow(10,powerOf10);
                powerOf10 --;
            }
            if (res > pow(2,31)-1){
                return pow(2,31)-1;
            }
            return res;
        }
        return 0;

    }
};

Code : ( Elegant)
class Solution {
public:
    int myAtoi(string s) 
    {
        int i=0;
        int sign=1;
        long ans=0;
        while(i<s.length() && s[i]==' ')
            i++;
        if(s[i]=='-')
        {
            sign=-1;
            i++;
        }
        else if(s[i]=='+')
            i++;
        while(i<s.length())
        {
            if(s[i]>='0' && s[i]<='9')
            {
                ans=ans*10+(s[i]-'0');
                if(ans>INT_MAX && sign==-1)
                    return INT_MIN;
                else if(ans>INT_MAX && sign==1)
                    return INT_MAX;
                i++;
            }
            else
                return ans*sign;
        }
        return (ans*sign);
    }
};
