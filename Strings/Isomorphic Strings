Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
Example 1:
Input: s = "egg", t = "add"
Output: true
Constraints:
1 <= s.length <= 5 * 10^4
t.length == s.length
s and t consist of any valid ascii character.
Key Idea : Two Maps
Code :
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if (s.size() != t.size()){
            return false;
        }
        unordered_map<char,char> my;
        unordered_map<char,char> my1;
        int n = s.size();
        for (int i = 0; i < n; i++){
            if (my.find(s[i]) != my.end() && my1.find(t[i]) != my1.end()){
                if (my[s[i]] != t[i] || my1[t[i]] != s[i]){
                    return false;
                }
            }
            else if (my.find(s[i]) == my.end() && my1.find(t[i]) == my1.end()) {
                my[s[i]] = t[i];
                my1[t[i]] = s[i];
            }
            else if (my.find(s[i]) != my.end() && my1.find(t[i]) == my1.end()){
                if (my[s[i]] != t[i]){
                    return false;
                }
                my1[t[i]] = s[i];
            }
            else if (my.find(s[i]) == my.end() && my1.find(t[i]) != my1.end()){
                if (my1[t[i]] != s[i]){
                    return false;
                }
                my[s[i]] = t[i];
            }
            
                
        }
        return true;
    }
};
