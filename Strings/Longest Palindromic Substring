Given a string s, return the longest palindromic substring in s.
Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.
Ideas : Brute force, memoise it; give MLE etc. 
Manacher's algo not req for interviews.

Code : (Tbh easy enough if u think)
string expand_from_centre(string s, int i, int j){
        int left = i;
        int right = j;
        int n = s.size();
        while (left >= 0 && right < n && s[left] == s[right]){
            left --;
            right ++;
        }
        int actual_left = left + 1;
        int actual_right = right - 1;
        return s.substr(actual_left, actual_right - actual_left + 1);
    }

    string longestPalindrome(string s) {
        int n = s.size();
        int maxLength = 1;
        string ans = s.substr(0,1);
        for (int i = 0; i < n-1; i++){
            string odd = expand_from_centre(s,i,i);
            string even = expand_from_centre(s,i,i+1);
            if (odd.size() > maxLength){
                maxLength = odd.size();
                ans = odd;
            }
            if (even.size() > maxLength){
                maxLength = even.size();
                ans = even;
            }
        }
        return ans;
    }
