Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters.
Example :
Input:
S = "aba", K = 2
Output:
3
Explanation:
The substrings are: "ab", "ba" and "aba".
Code : (TLE)
#include <string>
#include <unordered_map>
using namespace std;

// the number of subarrays with at most K distinct elements
int most_k_chars(string& s, int k)
{
    if (s.size() == 0) {
        return 0;
    }
    unordered_map<char, int> map;
    int num = 0, left = 0;

    for (int i = 0; i < s.size(); i++) {
        map[s[i]]++;
        while (map.size() > k) {
            map[s[left]]--;
            if (map[s[left]] == 0) {
                map.erase(s[left]);
            }
            left++;
        }
        num += i - left + 1;
    }
    return num;
}

int exact_k_chars(string& s, int k)
{
    return most_k_chars(s, k) - most_k_chars(s, k - 1);
}
Code : (Accepted)
#include <iostream>
#include <vector>
using namespace std;

// Function to count the number of substrings with at most k distinct characters
int countSubstringsWithAtMostKDistinctChars(string &s, int k) {
    int left = 0, right = 0, n = s.size(), distinctCount = 0, substringCount = 0;

    // Vector to store the frequency of characters in the current substring
    vector<int> charFrequency(26, 0);

    while (right < n) {
        int charIndex = s[right] - 'a';
        charFrequency[charIndex]++;

        // If the frequency becomes 1, it means a new distinct character is added
        if (charFrequency[charIndex] == 1) {
            distinctCount++;
        }

        // While the number of distinct characters exceeds k, move the left pointer
        while (distinctCount > k) {
            charFrequency[s[left] - 'a']--;

            // If the frequency becomes 0, it means a distinct character is removed
            if (charFrequency[s[left] - 'a'] == 0) {
                distinctCount--;
            }

            left++;
        }

        // Add the count of substrings with at most k distinct characters
        substringCount += (right - left + 1);

        // Move the right pointer to expand the window
        right++;
    }

    return substringCount;
}

// Function to count the number of substrings with exactly k distinct characters
int countSubstringsWithExactlyKDistinctChars(string str, int k) {
    // Count substrings with at most k distinct characters
    int countAtMostK = countSubstringsWithAtMostKDistinctChars(str, k);

    // Count substrings with at most (k-1) distinct characters
    int countAtMostKMinus1 = countSubstringsWithAtMostKDistinctChars(str, k - 1);

    // The difference gives the count of substrings with exactly k distinct characters
    return countAtMostK - countAtMostKMinus1;
}
