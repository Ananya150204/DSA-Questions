Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.

Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Constraints:
1 <= s.length <= 5 * 10^5
s consists of uppercase and lowercase English letters and digits.

Code : Priority queue (Idea is simple. Implementation is a bit involved)
typedef pair<char,int> p;

struct lambda{
    bool operator()(p p1, p p2){
        return p1.second < p2.second;
    }
};
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int> mp;
        for (char ch : s){
            mp[ch] ++;
        }
        priority_queue<p,vector<p>,lambda> pq;
        for (p ele : mp){
            pq.push({ele.first,ele.second});
        }
        string ans = "";
        while(pq.empty() == false){
            p ele = pq.top();
            pq.pop();
            ans.append(ele.second,ele.first); // This is required otherwise MLE.
        }
        return ans;
        
    }
};
Code : Vector only 
typedef pair<char,int> p;

class Solution {
public:
    string frequencySort(string s) {
        vector<p> v(123);
        for (char ch : s){ // Store the characters with frequency in a vec
            int freq = v[ch].second;
            v[ch] = {ch,freq+1};
        }
        // Sort the vector in decreasing frequency;
        auto lambda = [](p p1, p p2){
            return p1.second > p2.second;
        };
        sort (v.begin(),v.end(),lambda);

        // Vec to string
        string ans = "";
        int i = 0;
        while (v[i].second != 0){
            ans.append(v[i].second,v[i].first);
            i ++; 
        }
        return ans;
    }
};
