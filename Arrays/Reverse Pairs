Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 
Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 10^4
-2^31 <= nums[i] <= 2^31 - 1

Code :
class Solution {
public:
    long long merge (vector<int>& arr, vector<int>& brr, vector<int>& crr){
        long long i = 0;
        long long j = 0;
        long long k = 0;
        long long n = brr.size();
        long long m = crr.size();
        long long o = 0;
        long long count = 0;
        for (long long l = 0; l < n; l++){
            while (o < m && (long long)brr[l] > 2*(long long)crr[o]){
                o++;
            }
            count += (o);
        }
        while (i < n && j < m){
            if (brr[i] <= crr[j]){
                arr[k++] = brr[i++];
            }
            else {
                arr[k++] = crr[j++];
            }
        }
        while (i < n){
            arr[k++] = brr[i++];
        }
        while (j < m){
            arr[k++] = crr[j++];
        }
        return count;
    }
    int reversePairs(vector<int>& arr) {
        vector<int> brr;
        vector<int> crr;
        long long n = arr.size();
        long long count = 0;
        if (n > 1){
            for (long long i = 0; i < n/2; i++){
                brr.push_back(arr[i]);
            }
            for (long long i = n/2; i < n; i++){
                crr.push_back(arr[i]);
            }
            count += reversePairs(brr);
            count += reversePairs(crr);
            count += merge(arr,brr,crr);
        }
        return (int)count;
    }
};
