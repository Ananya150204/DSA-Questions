Problem statement
Ninja and his friend are playing a game of subarrays. They have an array ‘NUMS’ of length ‘N’. Ninja’s friend gives him an arbitrary integer ‘K’ and asks him to find the length of the longest subarray in which the sum of elements is equal to ‘K’.
Ninjas asks for your help to win this game. Find the length of the longest subarray in which the sum of elements is equal to ‘K’.
If there is no subarray whose sum is ‘K’ then you should return 0.

Constraints :
1 <= T <= 10
1 <= N <= 10^5
-10^6 <= NUMS[ i ] <= 10^6
-10^6 <= K <= 10^6

Sum of N Over all the Test cases <= 10^5

Time Limit: 1 sec
Sample Input 1 :
2
3 5
2 3 5
3 1
-1 1 1
Sample Output 1 :
2
3
Explanation Of Sample Input 1 :
For the first case:
There are two subarrays with sum = 5, [2, 3] and [5]. Hence the length of the longest subarray is 2.

For the second case:
Longest subarray with sum = 1 is [1, -1, 1].
Sample Input 2 :
2
3 4
1 1 1
3 2
-50 0 52
Sample Output 2 :
0 
3

Solution :

#include <bits/stdc++.h> 


int getLongestSubarray(vector<int>& nums, int k){
    // Write your code here
    int maxLen = 0;
    map<int,int> prefixSum;
    int n = nums.size();
    int sum = 0;
    for (int i = 0; i < n; i++){
        sum += nums[i];
        if (sum == k){
            maxLen = max(maxLen,i+1);
        }
        if (prefixSum.find(sum-k) != prefixSum.end()){
            // Required x-k exists
            maxLen = max(maxLen,i-prefixSum[sum-k]);
        }
        if (prefixSum.find(sum) == prefixSum.end()){
            // This sum does not exist
            prefixSum[sum] = i;
        }
    }
    return maxLen;
}
