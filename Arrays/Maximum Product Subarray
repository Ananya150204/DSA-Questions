Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 10^4
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

Code :
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        int prod = 1;
        int prod1 = 1;
        int maxi = INT_MIN;
        for (int i = 0; i < n; i++){
            prod *= nums[i];
            prod1 *= nums[n-1-i];
            maxi = max(maxi,max(prod,prod1));
            if (prod == 0){
                prod = 1;
            }
            if (prod1 == 0){
                prod1 = 1;
            }
        }
        return maxi;
    }
};
