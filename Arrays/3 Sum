Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.
Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5

Key Idea : In method 1 u need to reinitialise the map for every increment of i. This is because if
u don't, the same index might get referred to again, and this will cause duplicates. Also, need to
push nums[j] into the map. In method 2 u sort and apply 2 pointers.

Code :

Method 1
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> ans;
        int n = nums.size();
        sort(nums.begin(),nums.end());
        for (int i = 0; i < n; i++){
            unordered_map <int,int> my;
            for (int j = i+1; j < n; j++){
                if (my.find(-nums[i]-nums[j]) != my.end()){
                    vector<int> temp = {nums[i],nums[j],-nums[i]-nums[j]};
                    sort(temp.begin(),temp.end());
                    ans.insert(temp);
                }
                my[nums[j]] += 1;
            }
        }
        vector<vector<int>> f(ans.begin(),ans.end());
        return f;
    }
};

Method 2 :
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& arr) {
        vector<vector<int>> ans;
       int n = arr.size();
       sort (arr.begin(),arr.end()); // To apply 2 pointers
       for (int i = 0; i < n; i++){
        if (i > 0 && arr[i] == arr[i-1]){
            continue;
        }
        int j = i + 1;
        int k = n - 1;
        while (j < k){ // j <= k Avoid duplicates
            int sum = arr[i] + arr[j] + arr[k];
            if (sum < 0){
                j++;
            }
            else if (sum > 0){
                k--;
            }
            else {
                ans.push_back({arr[i],arr[j],arr[k]});
                j++;
                k--;
                while (j < k && arr[j] == arr[j-1]){
                    j++;
                }
                while (j < k && arr[k] == arr[k+1]){
                    k--;
                }
            }
        }
       }
       return ans;
    }
};
