Given an array of integers. Find the Inversion Count in the array. 
Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
Code :
long long int merge(long long arr[], int N, long long brr[], int sz, long long crr[], int s){
        long long int c = 0;
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < sz && j < s){
            if (brr[i] <= crr[j]){ // When they are equal , increase i only. j might lead
            // to an inversion pair
              arr[k++] = brr[i++]; 
            }
            else if (brr[i] > crr[j]){
                c += (sz-i);
                arr[k++] = crr[j++];
            }
            
        }
        while (i < sz){
            
            arr[k++] = brr[i++];
        }
        while (j < s){
            arr[k++] = crr[j++];
        }
        return c;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long int count = 0;
        if (N > 1){
            long long* brr = new long long[N/2]; // Dynamic allocation otherwise seg fault
            long long* crr = new long long[N - N/2];
            for (int i = 0; i < N/2; i++){
                brr[i] = arr[i];
            }
            for (int i = 0; i < N-N/2; i++){
                crr[i] = arr[i+N/2];
            }
            count += inversionCount(brr,N/2);
            count += inversionCount(crr,N-N/2);
            count += merge(arr,N,brr,N/2,crr,N-N/2);
            delete [] brr;
            delete [] crr;
        }
        return count;
    }
