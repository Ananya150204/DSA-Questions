Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.
Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9

Key ideas : Easiest way is to sort and count. U can see the commented out code. The other way is to
use an unordered set. See that if u encounter any element and its previous (== element-1) does not
exist, then this element must be the starting of a consecutive seq.

Code :
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if (nums.size() == 0){
            return 0;
        }
    //    sort(nums.begin(),nums.end());
    //    int n = nums.size();
    //    int len = 1;
    //    int maxi = 1;
    //    for (int i = 0; i < n-1; i++){
    //     if (nums[i] + 1 == nums[i+1]){
    //         //cout << len << endl;
    //         len ++;
    //     }
    //     else if (nums[i] == nums[i+1]){
    //         continue;
    //     }
    //     else {
    //         maxi = max(maxi,len);
    //         len = 1;
    //     }
    //    }
    //    maxi = max(maxi,len);
    //    return maxi; 
    unordered_set<int> st;
    int longest = 1;
    for (int ele :nums){
        st.insert(ele);
    }
    for (int it : st){
        if (st.find(it-1) == st.end()){
            int count = 1;
            int x = it;
            while (st.find(x+1) != st.end()){
                x = x + 1;
                count = count + 1;
            }
            longest = max(longest,count);
        }
    }
    return longest;
    }
};
