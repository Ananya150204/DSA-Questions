Problem statement
You are given a tree with N vertex and N - 1 edge and you are supposed to find the diameter of the tree.

Diameter of a tree is defined as the maximum distance between any pair of leaves of a tree.

Detailed explanation ( Input/output format, Notes, Images )
Input Format:
The first line of input will contain T(number of test case), each test case follows as.
Line1: contain an integer N denoting the number of a vertex in the tree.
Next, N - 1 line contains two space-separated integers u and v denoting the edge between the vertex u and v.
Output Format:
For each test case print the diameter of the tree in a new line.
Constraints:
1 <= T <= 100
2 <= N <= 10^4
1 <= u, v <= N
Sample Input:
1
8
1 7
5 1
2 7
5 6
8 1
3 6
2 4
Sample output:
6
Idea : The diameter is the sum of the maximum and second maximum heights obtained from the children of a node.
Therefore, modify the DFS function such that it returns the maxHeight of a subtree rooted at i (when called with i). Now do routine checks
for maximum and second maximum. After getting the correct max and second max by iterating over all adjacent nodes of i, update the dia with 
max + second max if required. 

Code :

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int dfs(int root, vector<vector<int>>& adj, vector<bool>& vis, int& dia) {
    vis[root] = true;
    int max_height = 0, second_max_height = 0;
    for (int i : adj[root]) {
        if (!vis[i]) {
            int height = dfs(i, adj, vis, dia);
            if (height > max_height) {
                second_max_height = max_height;
                max_height = height;
            } else if (height > second_max_height) {
                second_max_height = height;
            }
        }
    }
    dia = max(dia, max_height + second_max_height);
    return max_height + 1;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> adj(n + 1);
        vector<bool> vis(n + 1, false);
        for (int i = 1; i < n; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int dia = 0;
        dfs(1, adj, vis, dia);
        cout << dia << endl;
    }
    return 0;
}
